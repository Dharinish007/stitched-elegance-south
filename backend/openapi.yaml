openapi: 3.0.0
info:
  title: Tailoring Portfolio API
  description: Production-ready backend for tailoring portfolio with admin workspace and user wishlist
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://your-app.onrender.com
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [ADMIN, USER]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Design:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        cloudinaryId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WishlistItem:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        designId:
          type: string
        addedAt:
          type: string
          format: date-time
        design:
          $ref: '#/components/schemas/Design'

paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Server is healthy

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                  minLength: 2
      responses:
        '201':
          description: User registered successfully
        '400':
          description: User already exists or validation error

  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
        '400':
          description: Invalid credentials

  /api/auth/profile:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
        '401':
          description: Unauthorized

  /api/designs:
    get:
      summary: Get all designs (public)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: tag
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of designs

  /api/designs/{id}:
    get:
      summary: Get design by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Design details
        '404':
          description: Design not found

  /api/admin/designs:
    post:
      summary: Create a new design (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [title, image]
              properties:
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Design created successfully
        '401':
          description: Unauthorized
        '403':
          description: Admin access required

    get:
      summary: Get all designs for admin management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of designs
        '403':
          description: Admin access required

  /api/admin/designs/{id}:
    put:
      summary: Update a design (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                tags:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Design updated successfully
        '404':
          description: Design not found
        '403':
          description: Admin access required

    delete:
      summary: Delete a design (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Design deleted successfully
        '404':
          description: Design not found
        '403':
          description: Admin access required

  /api/wishlist:
    get:
      summary: Get user's wishlist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's wishlist
        '401':
          description: Unauthorized

  /api/wishlist/{designId}:
    post:
      summary: Add design to wishlist
      security:
        - bearerAuth: []
      parameters:
        - name: designId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Design added to wishlist
        '400':
          description: Design already in wishlist
        '404':
          description: Design not found

    delete:
      summary: Remove design from wishlist
      security:
        - bearerAuth: []
      parameters:
        - name: designId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Design removed from wishlist
        '404':
          description: Design not found in wishlist

  /api/wishlist/{designId}/status:
    get:
      summary: Check if design is in wishlist
      security:
        - bearerAuth: []
      parameters:
        - name: designId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wishlist status